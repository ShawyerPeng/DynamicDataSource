<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <!-- 一. dao -->
    <!-- 1. 配置数据源 -->
    <context:property-placeholder location="classpath:db.properties" />

    <bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 连接池最大使用连接数 -->
        <property name="maxActive" value="20"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="1"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="20"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="3"/>
        <!-- 自动清除无用连接 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 清除无用连接的等待时间 -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 连接属性 -->
        <property name="connectionProperties" value="clientEncoding=UTF-8"/>
    </bean>
    <!--<bean id="masterDataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">-->
        <!--<property name="driverClassName" value="${master.jdbc.driver}" />-->
        <!--<property name="url" value="${master.jdbc.url}" />-->
        <!--<property name="username" value="${master.jdbc.username}" />-->
        <!--<property name="password" value="${master.jdbc.password}" />-->
        <!--<property name="maxTotal" value="10" />-->
        <!--<property name="maxIdle" value="5" />-->
    <!--</bean>-->
    <bean id="masterDataSource" parent="parentDataSource">
        <property name="driverClassName" value="${master.jdbc.driver}"/>
        <property name="url" value="${master.jdbc.url}"/>
        <property name="username" value="${master.jdbc.username}"/>
        <property name="password" value="${master.jdbc.password}"/>
    </bean>
    <bean id="slaveDataSource" parent="parentDataSource">
        <property name="driverClassName" value="${slave.jdbc.driver}"/>
        <property name="url" value="${slave.jdbc.url}"/>
        <property name="username" value="${slave.jdbc.username}"/>
        <property name="password" value="${slave.jdbc.password}"/>
    </bean>
    <!-- 用于动态选择主、从数据库的数据源实现 -->
    <bean id="dataSource" class="datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="master" value-ref="masterDataSource"/>
                <entry key="slave" value-ref="slaveDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="masterDataSource"/>
    </bean>

    <!-- 2.SqlsessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"/>
    </bean>

    <!-- 3.MapperScannerConfigurer -->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="mapper"/>-->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
    <!--</bean>-->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="mapper"/>
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
            </value>
        </property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!-- 二. service -->
    <context:component-scan base-package="service,dao"/>

    <!-- 三. transaction -->
    <!-- 1. 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 2. 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 3.aop -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* service.impl.*.*(..))"/>
    </aop:config>

    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <bean class="aop.DataSourceAdvice"/>

</beans>